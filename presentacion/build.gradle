plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'jacoco'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.com.example.estacionamiento"
        minSdk 26
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        testInstrumentationRunnerArguments clearPackageData: 'true'

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
        debug {
            debuggable true
            testCoverageEnabled true
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    viewBinding {
        enabled = true
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.room:room-ktx:2.4.2'
    implementation "androidx.activity:activity-ktx:1.4.0"

    //test
    androidTestUtil 'androidx.test:orchestrator:1.4.1'
    implementation 'androidx.test:core-ktx:1.4.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'

    // Kotlin components
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.20"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0-alpha06"

    // lifecycleScope:
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.0-alpha06'
    implementation "androidx.lifecycle:lifecycle-common-java8:2.4.1"

    // Dependencias de modulos
    implementation project(path: ':dominio')
    implementation project(path: ':infraestructura')

    //Inyeccion dependencias
    implementation"com.google.dagger:hilt-android:2.41"
    kapt  "com.google.dagger:hilt-android-compiler:2.41"

}

// tarea para los reportes de analisis de codigo

task jacocoTestReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport',':dominio:testDebugUnitTest',
                                                      ':presentacion:testDebugUnitTest',':infraestructura:testDebugUnitTest']) {

    def moduleDominio = project(':dominio')
    def moduleInfraestructura = project(':infraestructura')

    def directoriesToCoverage = layout.files(
            "$moduleDominio.buildDir/tmp/kotlin-classes/debug/com/example",
            "$moduleInfraestructura.buildDir/tmp/kotlin-classes/debug",
    )

    def mainSources = layout.files(
            "$moduleDominio.projectDir/src/main/java/com/example",
            "$moduleInfraestructura.projectDir/src/main/java/com/example",
    )

    def executionFilesFromConnectedAndroidTest = fileTree(
            dir: "$buildDir", includes:
            ["outputs/code_coverage/debugAndroidTest/connected/coverage.ec"],

    )

    def executionFileForUnitTestInModule =
            "$buildDir/outputs/code_coverage/debugUnitTest/testDebugUnitTest.exec"

    def executionFileForUnitTestInOtherModule =
            "$moduleDominio.buildDir/outputs/code_coverage/debugUnitTest/testDebugUnitTest.exec"
            "$moduleInfraestructura.buildDir/outputs/code_coverage/debugUnitTest/coverage.ec"

    def executionFiles = layout.files(
            executionFilesFromConnectedAndroidTest,
            executionFileForUnitTestInModule,
            executionFileForUnitTestInOtherModule
    )

    sourceDirectories.setFrom(files([mainSources]))
    classDirectories.setFrom(files([directoriesToCoverage.asFileTree]))
    executionData.setFrom(executionFiles.asFileTree)

    reports {
        xml.enabled true
        html.enabled true
    }

}
